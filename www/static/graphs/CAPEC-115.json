{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-668: Key Negotiation of Bluetooth Attack (KNOB)</b><br>An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
      "color": "#75aaff",
      "size": 18,
      "label": "Key Negotiation of Bluetooth Attack (KNOB)",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/668.html",
      "id": "CAPEC-668"
    },
    {
      "Description": "<b>CAPEC-480: Escaping Virtualization</b><br>An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "Escaping Virtualization",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/480.html",
      "id": "CAPEC-480"
    },
    {
      "Description": "<b>CAPEC-115: Authentication Bypass</b><br>An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.",
      "color": "#2176ff",
      "size": 30,
      "label": "Authentication Bypass",
      "label_class": "node-label-big",
      "type": "CAPEC",
      "abstraction": "Meta",
      "url": "https://capec.mitre.org/data/definitions/115.html",
      "id": "CAPEC-115"
    },
    {
      "Description": "<b>CAPEC-87: Forceful Browsing</b><br>An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",
      "color": "#75aaff",
      "size": 18,
      "label": "Forceful Browsing",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/87.html",
      "id": "CAPEC-87"
    },
    {
      "Description": "<b>CAPEC-237: Escaping a Sandbox by Calling Code in Another Language</b><br>The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
      "color": "#94ebff",
      "size": 10,
      "label": "Escaping a Sandbox by Calling Code in Another Language",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/237.html",
      "id": "CAPEC-237"
    },
    {
      "Description": "<b>CAPEC-664: Server Side Request Forgery</b><br>An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",
      "color": "#75aaff",
      "size": 18,
      "label": "Server Side Request Forgery",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/664.html",
      "id": "CAPEC-664"
    },
    {
      "Description": "<b>CAPEC-461: Web Services API Signature Forgery Leveraging Hash Function Extension Weakness</b><br>An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.",
      "color": "#75aaff",
      "size": 18,
      "label": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/461.html",
      "id": "CAPEC-461"
    }
  ],
  "links": [
    {
      "source": "CAPEC-668",
      "target": "CAPEC-115"
    },
    {
      "source": "CAPEC-480",
      "target": "CAPEC-115"
    },
    {
      "source": "CAPEC-87",
      "target": "CAPEC-115"
    },
    {
      "source": "CAPEC-237",
      "target": "CAPEC-480"
    },
    {
      "source": "CAPEC-664",
      "target": "CAPEC-115"
    },
    {
      "source": "CAPEC-461",
      "target": "CAPEC-115"
    }
  ]
}