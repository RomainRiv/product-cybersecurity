{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-126: Path Traversal</b><br>An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.",
      "color": "#75aaff",
      "size": 18,
      "label": "Path Traversal",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/126.html",
      "id": "CAPEC-126"
    },
    {
      "Description": "<b>CAPEC-139: Relative Path Traversal</b><br>An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",
      "color": "#94ebff",
      "size": 10,
      "label": "Relative Path Traversal",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/139.html",
      "id": "CAPEC-139"
    },
    {
      "Description": "<b>CAPEC-267: Leverage Alternate Encoding</b><br>An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.",
      "color": "#75aaff",
      "size": 18,
      "label": "Leverage Alternate Encoding",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/267.html",
      "id": "CAPEC-267"
    },
    {
      "Description": "<b>CAPEC-92: Forced Integer Overflow</b><br>This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
      "color": "#94ebff",
      "size": 10,
      "label": "Forced Integer Overflow",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/92.html",
      "id": "CAPEC-92"
    },
    {
      "Description": "<b>CAPEC-597: Absolute Path Traversal</b><br>An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as \"..\" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.",
      "color": "#94ebff",
      "size": 10,
      "label": "Absolute Path Traversal",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/597.html",
      "id": "CAPEC-597"
    },
    {
      "Description": "<b>CAPEC-80: Using UTF-8 Encoding to Bypass Validation Logic</b><br>This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using UTF-8 Encoding to Bypass Validation Logic",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/80.html",
      "id": "CAPEC-80"
    },
    {
      "Description": "<b>CAPEC-72: URL Encoding</b><br>This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
      "color": "#94ebff",
      "size": 10,
      "label": "URL Encoding",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/72.html",
      "id": "CAPEC-72"
    },
    {
      "Description": "<b>CAPEC-78: Using Escaped Slashes in Alternate Encoding</b><br>This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Escaped Slashes in Alternate Encoding",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/78.html",
      "id": "CAPEC-78"
    },
    {
      "Description": "<b>CAPEC-4: Using Alternative IP Address Encodings</b><br>This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Alternative IP Address Encodings",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/4.html",
      "id": "CAPEC-4"
    },
    {
      "Description": "<b>CAPEC-52: Embedding NULL Bytes</b><br>An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).",
      "color": "#94ebff",
      "size": 10,
      "label": "Embedding NULL Bytes",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/52.html",
      "id": "CAPEC-52"
    },
    {
      "Description": "<b>CAPEC-76: Manipulating Web Input to File System Calls</b><br>An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Manipulating Web Input to File System Calls",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/76.html",
      "id": "CAPEC-76"
    },
    {
      "Description": "<b>CAPEC-3: Using Leading 'Ghost' Character Sequences to Bypass Input Filters</b><br>Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/3.html",
      "id": "CAPEC-3"
    },
    {
      "Description": "<b>CAPEC-153: Input Data Manipulation</b><br>An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.",
      "color": "#2176ff",
      "size": 30,
      "label": "Input Data Manipulation",
      "label_class": "node-label-big",
      "type": "CAPEC",
      "abstraction": "Meta",
      "url": "https://capec.mitre.org/data/definitions/153.html",
      "id": "CAPEC-153"
    },
    {
      "Description": "<b>CAPEC-43: Exploiting Multiple Input Interpretation Layers</b><br>An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploiting Multiple Input Interpretation Layers",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/43.html",
      "id": "CAPEC-43"
    },
    {
      "Description": "<b>CAPEC-79: Using Slashes in Alternate Encoding</b><br>This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Slashes in Alternate Encoding",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/79.html",
      "id": "CAPEC-79"
    },
    {
      "Description": "<b>CAPEC-128: Integer Attacks</b><br>An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.",
      "color": "#75aaff",
      "size": 18,
      "label": "Integer Attacks",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/128.html",
      "id": "CAPEC-128"
    },
    {
      "Description": "<b>CAPEC-53: Postfix, Null Terminate, and Backslash</b><br>If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",
      "color": "#94ebff",
      "size": 10,
      "label": "Postfix, Null Terminate, and Backslash",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/53.html",
      "id": "CAPEC-53"
    },
    {
      "Description": "<b>CAPEC-120: Double Encoding</b><br>The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",
      "color": "#94ebff",
      "size": 10,
      "label": "Double Encoding",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/120.html",
      "id": "CAPEC-120"
    },
    {
      "Description": "<b>CAPEC-71: Using Unicode Encoding to Bypass Validation Logic</b><br>An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Unicode Encoding to Bypass Validation Logic",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/71.html",
      "id": "CAPEC-71"
    },
    {
      "Description": "<b>CAPEC-64: Using Slashes and URL Encoding Combined to Bypass Validation Logic</b><br>This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/64.html",
      "id": "CAPEC-64"
    }
  ],
  "links": [
    {
      "source": "CAPEC-126",
      "target": "CAPEC-153"
    },
    {
      "source": "CAPEC-139",
      "target": "CAPEC-126"
    },
    {
      "source": "CAPEC-267",
      "target": "CAPEC-153"
    },
    {
      "source": "CAPEC-92",
      "target": "CAPEC-128"
    },
    {
      "source": "CAPEC-597",
      "target": "CAPEC-126"
    },
    {
      "source": "CAPEC-80",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-72",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-78",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-4",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-52",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-76",
      "target": "CAPEC-126"
    },
    {
      "source": "CAPEC-3",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-43",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-79",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-128",
      "target": "CAPEC-153"
    },
    {
      "source": "CAPEC-53",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-120",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-71",
      "target": "CAPEC-267"
    },
    {
      "source": "CAPEC-64",
      "target": "CAPEC-267"
    }
  ]
}