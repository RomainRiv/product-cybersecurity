{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-533: Malicious Manual Software Update</b><br>An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Manual Software Update",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/533.html",
      "id": "CAPEC-533"
    },
    {
      "Description": "<b>CAPEC-187: Malicious Automated Software Update via Redirection</b><br>An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Automated Software Update via Redirection",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/187.html",
      "id": "CAPEC-187"
    },
    {
      "Description": "<b>CAPEC-185: Malicious Software Download</b><br>An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Software Download",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/185.html",
      "id": "CAPEC-185"
    },
    {
      "Description": "<b>CAPEC-669: Alteration of a Software Update</b><br>An adversary with access to an organization\u2019s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software\u2019s normal functionality.",
      "color": "#75aaff",
      "size": 18,
      "label": "Alteration of a Software Update",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/669.html",
      "id": "CAPEC-669"
    },
    {
      "Description": "<b>CAPEC-663: Exploitation of Transient Instruction Execution</b><br>An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploitation of Transient Instruction Execution",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/663.html",
      "id": "CAPEC-663"
    },
    {
      "Description": "<b>CAPEC-614: Rooting SIM Cards</b><br>SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.",
      "color": "#94ebff",
      "size": 10,
      "label": "Rooting SIM Cards",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/614.html",
      "id": "CAPEC-614"
    },
    {
      "Description": "<b>CAPEC-657: Malicious Automated Software Update via Spoofing</b><br>An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Automated Software Update via Spoofing",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/657.html",
      "id": "CAPEC-657"
    },
    {
      "Description": "<b>CAPEC-184: Software Integrity Attack</b><br>An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",
      "color": "#2176ff",
      "size": 30,
      "label": "Software Integrity Attack",
      "label_class": "node-label-big",
      "type": "CAPEC",
      "abstraction": "Meta",
      "url": "https://capec.mitre.org/data/definitions/184.html",
      "id": "CAPEC-184"
    },
    {
      "Description": "<b>CAPEC-186: Malicious Software Update</b><br>An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Software Update",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/186.html",
      "id": "CAPEC-186"
    },
    {
      "Description": "<b>CAPEC-696: Load Value Injection</b><br>An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Load Value Injection",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/696.html",
      "id": "CAPEC-696"
    }
  ],
  "links": [
    {
      "source": "CAPEC-533",
      "target": "CAPEC-186"
    },
    {
      "source": "CAPEC-187",
      "target": "CAPEC-186"
    },
    {
      "source": "CAPEC-185",
      "target": "CAPEC-184"
    },
    {
      "source": "CAPEC-669",
      "target": "CAPEC-184"
    },
    {
      "source": "CAPEC-663",
      "target": "CAPEC-184"
    },
    {
      "source": "CAPEC-614",
      "target": "CAPEC-186"
    },
    {
      "source": "CAPEC-657",
      "target": "CAPEC-186"
    },
    {
      "source": "CAPEC-186",
      "target": "CAPEC-184"
    },
    {
      "source": "CAPEC-696",
      "target": "CAPEC-663"
    }
  ]
}