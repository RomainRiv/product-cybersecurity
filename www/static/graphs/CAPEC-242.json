{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-242: Code Injection</b><br>An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",
      "color": "#2176ff",
      "size": 30,
      "label": "Code Injection",
      "label_class": "node-label-big",
      "type": "CAPEC",
      "abstraction": "Meta",
      "url": "https://capec.mitre.org/data/definitions/242.html",
      "id": "CAPEC-242"
    },
    {
      "Description": "<b>CAPEC-588: DOM-Based XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",
      "color": "#94ebff",
      "size": 10,
      "label": "DOM-Based XSS",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/588.html",
      "id": "CAPEC-588"
    },
    {
      "Description": "<b>CAPEC-32: XSS Through HTTP Query Strings</b><br>An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Query Strings",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/32.html",
      "id": "CAPEC-32"
    },
    {
      "Description": "<b>CAPEC-592: Stored XSS</b><br>An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.",
      "color": "#94ebff",
      "size": 10,
      "label": "Stored XSS",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/592.html",
      "id": "CAPEC-592"
    },
    {
      "Description": "<b>CAPEC-86: XSS Through HTTP Headers</b><br>An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Headers",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/86.html",
      "id": "CAPEC-86"
    },
    {
      "Description": "<b>CAPEC-44: Overflow Binary Resource File</b><br>An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Overflow Binary Resource File",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/44.html",
      "id": "CAPEC-44"
    },
    {
      "Description": "<b>CAPEC-468: Generic Cross-Browser Cross-Domain Theft</b><br>An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.",
      "color": "#75aaff",
      "size": 18,
      "label": "Generic Cross-Browser Cross-Domain Theft",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/468.html",
      "id": "CAPEC-468"
    },
    {
      "Description": "<b>CAPEC-63: Cross-Site Scripting (XSS)</b><br>An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross-Site Scripting (XSS)",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/63.html",
      "id": "CAPEC-63"
    },
    {
      "Description": "<b>CAPEC-244: XSS Targeting URI Placeholders</b><br>An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting URI Placeholders",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/244.html",
      "id": "CAPEC-244"
    },
    {
      "Description": "<b>CAPEC-209: XSS Using MIME Type Mismatch</b><br>An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using MIME Type Mismatch",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/209.html",
      "id": "CAPEC-209"
    },
    {
      "Description": "<b>CAPEC-245: XSS Using Doubled Characters</b><br>The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Doubled Characters",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/245.html",
      "id": "CAPEC-245"
    },
    {
      "Description": "<b>CAPEC-19: Embedding Scripts within Scripts</b><br>An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.",
      "color": "#75aaff",
      "size": 18,
      "label": "Embedding Scripts within Scripts",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/19.html",
      "id": "CAPEC-19"
    },
    {
      "Description": "<b>CAPEC-243: XSS Targeting HTML Attributes</b><br>An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting HTML Attributes",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/243.html",
      "id": "CAPEC-243"
    },
    {
      "Description": "<b>CAPEC-199: XSS Using Alternate Syntax</b><br>An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Alternate Syntax",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/199.html",
      "id": "CAPEC-199"
    },
    {
      "Description": "<b>CAPEC-247: XSS Using Invalid Characters</b><br>An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Invalid Characters",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/247.html",
      "id": "CAPEC-247"
    },
    {
      "Description": "<b>CAPEC-41: Using Meta-characters in E-mail Headers to Inject Malicious Payloads</b><br>This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/41.html",
      "id": "CAPEC-41"
    },
    {
      "Description": "<b>CAPEC-23: File Content Injection</b><br>An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",
      "color": "#75aaff",
      "size": 18,
      "label": "File Content Injection",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/23.html",
      "id": "CAPEC-23"
    },
    {
      "Description": "<b>CAPEC-198: XSS Targeting Error Pages</b><br>An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Error Pages",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/198.html",
      "id": "CAPEC-198"
    },
    {
      "Description": "<b>CAPEC-18: XSS Targeting Non-Script Elements</b><br>This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Non-Script Elements",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/18.html",
      "id": "CAPEC-18"
    },
    {
      "Description": "<b>CAPEC-591: Reflected XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Reflected XSS",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/591.html",
      "id": "CAPEC-591"
    }
  ],
  "links": [
    {
      "source": "CAPEC-588",
      "target": "CAPEC-63"
    },
    {
      "source": "CAPEC-32",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-32",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-32",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-592",
      "target": "CAPEC-63"
    },
    {
      "source": "CAPEC-86",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-86",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-86",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-44",
      "target": "CAPEC-23"
    },
    {
      "source": "CAPEC-468",
      "target": "CAPEC-242"
    },
    {
      "source": "CAPEC-63",
      "target": "CAPEC-242"
    },
    {
      "source": "CAPEC-244",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-244",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-244",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-209",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-245",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-245",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-245",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-19",
      "target": "CAPEC-242"
    },
    {
      "source": "CAPEC-243",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-243",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-243",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-199",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-199",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-199",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-247",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-247",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-247",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-41",
      "target": "CAPEC-242"
    },
    {
      "source": "CAPEC-23",
      "target": "CAPEC-242"
    },
    {
      "source": "CAPEC-198",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-198",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-198",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-18",
      "target": "CAPEC-591"
    },
    {
      "source": "CAPEC-18",
      "target": "CAPEC-592"
    },
    {
      "source": "CAPEC-18",
      "target": "CAPEC-588"
    },
    {
      "source": "CAPEC-591",
      "target": "CAPEC-63"
    }
  ]
}