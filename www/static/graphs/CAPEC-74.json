{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-663: Exploitation of Transient Instruction Execution</b><br>An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploitation of Transient Instruction Execution",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/663.html",
      "id": "CAPEC-663"
    },
    {
      "Description": "<b>CAPEC-696: Load Value Injection</b><br>An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Load Value Injection",
      "label_class": "node-label-small",
      "type": "CAPEC",
      "abstraction": "Detailed",
      "url": "https://capec.mitre.org/data/definitions/696.html",
      "id": "CAPEC-696"
    },
    {
      "Description": "<b>CAPEC-74: Manipulating State</b><br>The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. \n State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. \n If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",
      "color": "#2176ff",
      "size": 30,
      "label": "Manipulating State",
      "label_class": "node-label-big",
      "type": "CAPEC",
      "abstraction": "Meta",
      "url": "https://capec.mitre.org/data/definitions/74.html",
      "id": "CAPEC-74"
    },
    {
      "Description": "<b>CAPEC-140: Bypassing of Intermediate Forms in Multiple-Form Sets</b><br>Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.",
      "color": "#75aaff",
      "size": 18,
      "label": "Bypassing of Intermediate Forms in Multiple-Form Sets",
      "label_class": "node-label-medium",
      "type": "CAPEC",
      "abstraction": "Standard",
      "url": "https://capec.mitre.org/data/definitions/140.html",
      "id": "CAPEC-140"
    }
  ],
  "links": [
    {
      "source": "CAPEC-663",
      "target": "CAPEC-74"
    },
    {
      "source": "CAPEC-696",
      "target": "CAPEC-663"
    },
    {
      "source": "CAPEC-140",
      "target": "CAPEC-74"
    }
  ]
}