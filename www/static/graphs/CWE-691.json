{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context</b><br>The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Unsynchronized Access to Shared Data in a Multithreaded Context",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/567.html",
      "id": "CWE-567"
    },
    {
      "Description": "<b>CWE-597: Use of Wrong Operator in String Comparison</b><br>The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Use of Wrong Operator in String Comparison",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/597.html",
      "id": "CWE-597"
    },
    {
      "Description": "<b>CWE-662: Improper Synchronization</b><br>The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",
      "color": "#ff6200",
      "size": 18,
      "label": "Improper Synchronization",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/662.html",
      "id": "CWE-662"
    },
    {
      "Description": "<b>CWE-841: Improper Enforcement of Behavioral Workflow</b><br>The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Improper Enforcement of Behavioral Workflow",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/841.html",
      "id": "CWE-841"
    },
    {
      "Description": "<b>CWE-364: Signal Handler Race Condition</b><br>The product uses a signal handler that introduces a race condition.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Signal Handler Race Condition",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/364.html",
      "id": "CWE-364"
    },
    {
      "Description": "<b>CWE-366: Race Condition within a Thread</b><br>If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Race Condition within a Thread",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/366.html",
      "id": "CWE-366"
    },
    {
      "Description": "<b>CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control</b><br>The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1193.html",
      "id": "CWE-1193"
    },
    {
      "Description": "<b>CWE-600: Uncaught Exception in Servlet </b><br>The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Uncaught Exception in Servlet ",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/600.html",
      "id": "CWE-600"
    },
    {
      "Description": "<b>CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe</b><br>The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Signal Handler with Functionality that is not Asynchronous-Safe",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/828.html",
      "id": "CWE-828"
    },
    {
      "Description": "<b>CWE-412: Unrestricted Externally Accessible Lock</b><br>The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Unrestricted Externally Accessible Lock",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/412.html",
      "id": "CWE-412"
    },
    {
      "Description": "<b>CWE-481: Assigning instead of Comparing</b><br>The code uses an operator for assignment when the intention was to perform a comparison.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Assigning instead of Comparing",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/481.html",
      "id": "CWE-481"
    },
    {
      "Description": "<b>CWE-1279: Cryptographic Operations are run Before Supporting Units are Ready</b><br>Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Cryptographic Operations are run Before Supporting Units are Ready",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1279.html",
      "id": "CWE-1279"
    },
    {
      "Description": "<b>CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking Context</b><br>The product uses a non-blocking model that relies on a single threaded process\n\t\t\tfor features such as scalability, but it contains code that can block when it is invoked.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Use of Blocking Code in Single-threaded, Non-blocking Context",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1322.html",
      "id": "CWE-1322"
    },
    {
      "Description": "<b>CWE-1058: Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element</b><br>The code contains a function or method that\n\t\t operates in a multi-threaded environment but owns an unsafe non-final\n\t\t                     static storable or member data element.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1058.html",
      "id": "CWE-1058"
    },
    {
      "Description": "<b>CWE-432: Dangerous Signal Handler not Disabled During Sensitive Operations</b><br>The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Dangerous Signal Handler not Disabled During Sensitive Operations",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/432.html",
      "id": "CWE-432"
    },
    {
      "Description": "<b>CWE-689: Permission Race Condition During Resource Copy</b><br>The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",
      "color": "#9ac20c",
      "size": 10,
      "label": "Permission Race Condition During Resource Copy",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Compound",
      "url": "https://cwe.mitre.org/data/definitions/689.html",
      "id": "CWE-689"
    },
    {
      "Description": "<b>CWE-408: Incorrect Behavior Order: Early Amplification</b><br>The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Incorrect Behavior Order: Early Amplification",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/408.html",
      "id": "CWE-408"
    },
    {
      "Description": "<b>CWE-834: Excessive Iteration</b><br>The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.",
      "color": "#ff6200",
      "size": 18,
      "label": "Excessive Iteration",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/834.html",
      "id": "CWE-834"
    },
    {
      "Description": "<b>CWE-667: Improper Locking</b><br>The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
      "color": "#ff6200",
      "size": 18,
      "label": "Improper Locking",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/667.html",
      "id": "CWE-667"
    },
    {
      "Description": "<b>CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context</b><br>The product uses the singleton pattern when creating a resource within a multithreaded environment.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/543.html",
      "id": "CWE-543"
    },
    {
      "Description": "<b>CWE-831: Signal Handler Function Associated with Multiple Signals</b><br>The product defines a function that is used as a handler for more than one signal.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Signal Handler Function Associated with Multiple Signals",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/831.html",
      "id": "CWE-831"
    },
    {
      "Description": "<b>CWE-395: Use of NullPointerException Catch to Detect NULL Pointer Dereference</b><br>Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/395.html",
      "id": "CWE-395"
    },
    {
      "Description": "<b>CWE-833: Deadlock</b><br>The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Deadlock",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/833.html",
      "id": "CWE-833"
    },
    {
      "Description": "<b>CWE-765: Multiple Unlocks of a Critical Resource</b><br>The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Multiple Unlocks of a Critical Resource",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/765.html",
      "id": "CWE-765"
    },
    {
      "Description": "<b>CWE-484: Omitted Break Statement in Switch</b><br>The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Omitted Break Statement in Switch",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/484.html",
      "id": "CWE-484"
    },
    {
      "Description": "<b>CWE-382: J2EE Bad Practices: Use of System.exit()</b><br>A J2EE application uses System.exit(), which also shuts down its container.",
      "color": "#e8e66b",
      "size": 10,
      "label": "J2EE Bad Practices: Use of System.exit()",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/382.html",
      "id": "CWE-382"
    },
    {
      "Description": "<b>CWE-783: Operator Precedence Logic Error</b><br>The product uses an expression in which operator precedence causes incorrect logic to be used.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Operator Precedence Logic Error",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/783.html",
      "id": "CWE-783"
    },
    {
      "Description": "<b>CWE-1096: Singleton Class Instance Creation without Proper Locking or Synchronization</b><br>The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Singleton Class Instance Creation without Proper Locking or Synchronization",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/1096.html",
      "id": "CWE-1096"
    },
    {
      "Description": "<b>CWE-574: EJB Bad Practices: Use of Synchronization Primitives</b><br>The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.",
      "color": "#e8e66b",
      "size": 10,
      "label": "EJB Bad Practices: Use of Synchronization Primitives",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/574.html",
      "id": "CWE-574"
    },
    {
      "Description": "<b>CWE-1298: Hardware Logic Contains Race Conditions</b><br>A race condition in the hardware logic results in undermining security guarantees of the system.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Hardware Logic Contains Race Conditions",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1298.html",
      "id": "CWE-1298"
    },
    {
      "Description": "<b>CWE-558: Use of getlogin() in Multithreaded Application</b><br>The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Use of getlogin() in Multithreaded Application",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/558.html",
      "id": "CWE-558"
    },
    {
      "Description": "<b>CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')</b><br>The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/776.html",
      "id": "CWE-776"
    },
    {
      "Description": "<b>CWE-551: Incorrect Behavior Order: Authorization Before Parsing and Canonicalization</b><br>If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/551.html",
      "id": "CWE-551"
    },
    {
      "Description": "<b>CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition</b><br>The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/367.html",
      "id": "CWE-367"
    },
    {
      "Description": "<b>CWE-363: Race Condition Enabling Link Following</b><br>The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Race Condition Enabling Link Following",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/363.html",
      "id": "CWE-363"
    },
    {
      "Description": "<b>CWE-617: Reachable Assertion</b><br>The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Reachable Assertion",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/617.html",
      "id": "CWE-617"
    },
    {
      "Description": "<b>CWE-1223: Race Condition for Write-Once Attributes</b><br>A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Race Condition for Write-Once Attributes",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1223.html",
      "id": "CWE-1223"
    },
    {
      "Description": "<b>CWE-397: Declaration of Throws for Generic Exception</b><br>Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Declaration of Throws for Generic Exception",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/397.html",
      "id": "CWE-397"
    },
    {
      "Description": "<b>CWE-414: Missing Lock Check</b><br>A product does not check to see if a lock is present before performing sensitive operations on a resource.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Missing Lock Check",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/414.html",
      "id": "CWE-414"
    },
    {
      "Description": "<b>CWE-663: Use of a Non-reentrant Function in a Concurrent Context</b><br>The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Use of a Non-reentrant Function in a Concurrent Context",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/663.html",
      "id": "CWE-663"
    },
    {
      "Description": "<b>CWE-584: Return Inside Finally Block</b><br>The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Return Inside Finally Block",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/584.html",
      "id": "CWE-584"
    },
    {
      "Description": "<b>CWE-1281: Sequence of Processor Instructions Leads to Unexpected Behavior</b><br>Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Sequence of Processor Instructions Leads to Unexpected Behavior",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1281.html",
      "id": "CWE-1281"
    },
    {
      "Description": "<b>CWE-430: Deployment of Wrong Handler</b><br>The wrong \"handler\" is assigned to process an object.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Deployment of Wrong Handler",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/430.html",
      "id": "CWE-430"
    },
    {
      "Description": "<b>CWE-1190: DMA Device Enabled Too Early in Boot Phase</b><br>The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",
      "color": "#ffbb00",
      "size": 10,
      "label": "DMA Device Enabled Too Early in Boot Phase",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1190.html",
      "id": "CWE-1190"
    },
    {
      "Description": "<b>CWE-368: Context Switching Race Condition</b><br>A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Context Switching Race Condition",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/368.html",
      "id": "CWE-368"
    },
    {
      "Description": "<b>CWE-482: Comparing instead of Assigning</b><br>The code uses an operator for comparison when the intention was to perform an assignment.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Comparing instead of Assigning",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/482.html",
      "id": "CWE-482"
    },
    {
      "Description": "<b>CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop')</b><br>The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Loop with Unreachable Exit Condition ('Infinite Loop')",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/835.html",
      "id": "CWE-835"
    },
    {
      "Description": "<b>CWE-248: Uncaught Exception</b><br>An exception is thrown from a function, but it is not caught.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Uncaught Exception",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/248.html",
      "id": "CWE-248"
    },
    {
      "Description": "<b>CWE-479: Signal Handler Use of a Non-reentrant Function</b><br>The product defines a signal handler that calls a non-reentrant function.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Signal Handler Use of a Non-reentrant Function",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/479.html",
      "id": "CWE-479"
    },
    {
      "Description": "<b>CWE-670: Always-Incorrect Control Flow Implementation</b><br>The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
      "color": "#ff6200",
      "size": 18,
      "label": "Always-Incorrect Control Flow Implementation",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/670.html",
      "id": "CWE-670"
    },
    {
      "Description": "<b>CWE-480: Use of Incorrect Operator</b><br>The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Use of Incorrect Operator",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/480.html",
      "id": "CWE-480"
    },
    {
      "Description": "<b>CWE-609: Double-Checked Locking</b><br>The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Double-Checked Locking",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/609.html",
      "id": "CWE-609"
    },
    {
      "Description": "<b>CWE-421: Race Condition During Access to Alternate Channel</b><br>The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Race Condition During Access to Alternate Channel",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/421.html",
      "id": "CWE-421"
    },
    {
      "Description": "<b>CWE-413: Improper Resource Locking</b><br>The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Improper Resource Locking",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/413.html",
      "id": "CWE-413"
    },
    {
      "Description": "<b>CWE-591: Sensitive Data Storage in Improperly Locked Memory</b><br>The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Sensitive Data Storage in Improperly Locked Memory",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/591.html",
      "id": "CWE-591"
    },
    {
      "Description": "<b>CWE-1232: Improper Lock Behavior After Power State Transition</b><br>Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Improper Lock Behavior After Power State Transition",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1232.html",
      "id": "CWE-1232"
    },
    {
      "Description": "<b>CWE-431: Missing Handler</b><br>A handler is not available or implemented.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Missing Handler",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/431.html",
      "id": "CWE-431"
    },
    {
      "Description": "<b>CWE-799: Improper Control of Interaction Frequency</b><br>The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",
      "color": "#ff6200",
      "size": 18,
      "label": "Improper Control of Interaction Frequency",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/799.html",
      "id": "CWE-799"
    },
    {
      "Description": "<b>CWE-181: Incorrect Behavior Order: Validate Before Filter</b><br>The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Incorrect Behavior Order: Validate Before Filter",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/181.html",
      "id": "CWE-181"
    },
    {
      "Description": "<b>CWE-572: Call to Thread run() instead of start()</b><br>The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Call to Thread run() instead of start()",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/572.html",
      "id": "CWE-572"
    },
    {
      "Description": "<b>CWE-1264: Hardware Logic with Insecure De-Synchronization between Control and Data Channels</b><br>The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1264.html",
      "id": "CWE-1264"
    },
    {
      "Description": "<b>CWE-1233: Security-Sensitive Hardware Controls with Missing Lock Bit Protection</b><br>The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1233.html",
      "id": "CWE-1233"
    },
    {
      "Description": "<b>CWE-768: Incorrect Short Circuit Evaluation</b><br>The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Incorrect Short Circuit Evaluation",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/768.html",
      "id": "CWE-768"
    },
    {
      "Description": "<b>CWE-698: Execution After Redirect (EAR)</b><br>The web application sends a redirect to another location, but instead of exiting, it executes additional code.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Execution After Redirect (EAR)",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/698.html",
      "id": "CWE-698"
    },
    {
      "Description": "<b>CWE-483: Incorrect Block Delimitation</b><br>The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Incorrect Block Delimitation",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/483.html",
      "id": "CWE-483"
    },
    {
      "Description": "<b>CWE-396: Declaration of Catch for Generic Exception</b><br>Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Declaration of Catch for Generic Exception",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/396.html",
      "id": "CWE-396"
    },
    {
      "Description": "<b>CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls</b><br>During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1265.html",
      "id": "CWE-1265"
    },
    {
      "Description": "<b>CWE-820: Missing Synchronization</b><br>The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Missing Synchronization",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/820.html",
      "id": "CWE-820"
    },
    {
      "Description": "<b>CWE-696: Incorrect Behavior Order</b><br>The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",
      "color": "#ff6200",
      "size": 18,
      "label": "Incorrect Behavior Order",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/696.html",
      "id": "CWE-696"
    },
    {
      "Description": "<b>CWE-1088: Synchronous Access of Remote Resource without Timeout</b><br>The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Synchronous Access of Remote Resource without Timeout",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1088.html",
      "id": "CWE-1088"
    },
    {
      "Description": "<b>CWE-821: Incorrect Synchronization</b><br>The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Incorrect Synchronization",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/821.html",
      "id": "CWE-821"
    },
    {
      "Description": "<b>CWE-455: Non-exit on Failed Initialization</b><br>The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Non-exit on Failed Initialization",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/455.html",
      "id": "CWE-455"
    },
    {
      "Description": "<b>CWE-705: Incorrect Control Flow Scoping</b><br>The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.",
      "color": "#ff6200",
      "size": 18,
      "label": "Incorrect Control Flow Scoping",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/705.html",
      "id": "CWE-705"
    },
    {
      "Description": "<b>CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks</b><br>System configuration protection may be bypassed during debug mode.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Hardware Internal or Debug Modes Allow Override of Locks",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1234.html",
      "id": "CWE-1234"
    },
    {
      "Description": "<b>CWE-180: Incorrect Behavior Order: Validate Before Canonicalize</b><br>The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.",
      "color": "#e8e66b",
      "size": 10,
      "label": "Incorrect Behavior Order: Validate Before Canonicalize",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Variant",
      "url": "https://cwe.mitre.org/data/definitions/180.html",
      "id": "CWE-180"
    },
    {
      "Description": "<b>CWE-764: Multiple Locks of a Critical Resource</b><br>The product locks a critical resource more times than intended, leading to an unexpected state in the system.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Multiple Locks of a Critical Resource",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/764.html",
      "id": "CWE-764"
    },
    {
      "Description": "<b>CWE-1280: Access Control Check Implemented After Asset is Accessed</b><br>A product's hardware-based access control check occurs after the asset has been accessed.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Access Control Check Implemented After Asset is Accessed",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/1280.html",
      "id": "CWE-1280"
    },
    {
      "Description": "<b>CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')</b><br>The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
      "color": "#ff6200",
      "size": 18,
      "label": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/362.html",
      "id": "CWE-362"
    },
    {
      "Description": "<b>CWE-832: Unlock of a Resource that is not Locked</b><br>The product attempts to unlock a resource that is not locked.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Unlock of a Resource that is not Locked",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/832.html",
      "id": "CWE-832"
    },
    {
      "Description": "<b>CWE-837: Improper Enforcement of a Single, Unique Action</b><br>The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Improper Enforcement of a Single, Unique Action",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/837.html",
      "id": "CWE-837"
    },
    {
      "Description": "<b>CWE-179: Incorrect Behavior Order: Early Validation</b><br>The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Incorrect Behavior Order: Early Validation",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/179.html",
      "id": "CWE-179"
    },
    {
      "Description": "<b>CWE-307: Improper Restriction of Excessive Authentication Attempts</b><br>The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
      "color": "#ffbb00",
      "size": 10,
      "label": "Improper Restriction of Excessive Authentication Attempts",
      "label_class": "node-label-small",
      "type": "CWE",
      "abstraction": "Base",
      "url": "https://cwe.mitre.org/data/definitions/307.html",
      "id": "CWE-307"
    },
    {
      "Description": "<b>CWE-674: Uncontrolled Recursion</b><br>The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
      "color": "#ff6200",
      "size": 18,
      "label": "Uncontrolled Recursion",
      "label_class": "node-label-medium",
      "type": "CWE",
      "abstraction": "Class",
      "url": "https://cwe.mitre.org/data/definitions/674.html",
      "id": "CWE-674"
    },
    {
      "Description": "<b>CWE-691: Insufficient Control Flow Management</b><br>The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",
      "color": "#db0054",
      "size": 30,
      "label": "Insufficient Control Flow Management",
      "label_class": "node-label-big",
      "type": "CWE",
      "abstraction": "Pillar",
      "url": "https://cwe.mitre.org/data/definitions/691.html",
      "id": "CWE-691"
    }
  ],
  "links": [
    {
      "width": 1,
      "source": "CWE-567",
      "target": "CWE-820"
    },
    {
      "width": 1,
      "source": "CWE-567",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-597",
      "target": "CWE-480"
    },
    {
      "width": 1,
      "source": "CWE-662",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-841",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-364",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-366",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-366",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-1193",
      "target": "CWE-696"
    },
    {
      "width": 1,
      "source": "CWE-600",
      "target": "CWE-248"
    },
    {
      "width": 1,
      "source": "CWE-828",
      "target": "CWE-364"
    },
    {
      "width": 1,
      "source": "CWE-412",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-481",
      "target": "CWE-480"
    },
    {
      "width": 1,
      "source": "CWE-1279",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-1322",
      "target": "CWE-834"
    },
    {
      "width": 1,
      "source": "CWE-1058",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-432",
      "target": "CWE-364"
    },
    {
      "width": 1,
      "source": "CWE-689",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-408",
      "target": "CWE-696"
    },
    {
      "width": 1,
      "source": "CWE-834",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-667",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-543",
      "target": "CWE-820"
    },
    {
      "width": 1,
      "source": "CWE-543",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-831",
      "target": "CWE-364"
    },
    {
      "width": 1,
      "source": "CWE-395",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-833",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-833",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-765",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-484",
      "target": "CWE-670"
    },
    {
      "width": 1,
      "source": "CWE-382",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-783",
      "target": "CWE-670"
    },
    {
      "width": 1,
      "source": "CWE-1096",
      "target": "CWE-820"
    },
    {
      "width": 1,
      "source": "CWE-1096",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-574",
      "target": "CWE-821"
    },
    {
      "width": 1,
      "source": "CWE-1298",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-558",
      "target": "CWE-663"
    },
    {
      "width": 1,
      "source": "CWE-776",
      "target": "CWE-674"
    },
    {
      "width": 1,
      "source": "CWE-551",
      "target": "CWE-696"
    },
    {
      "width": 1,
      "source": "CWE-367",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-363",
      "target": "CWE-367"
    },
    {
      "width": 1,
      "source": "CWE-617",
      "target": "CWE-670"
    },
    {
      "width": 1,
      "source": "CWE-1223",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-397",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-414",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-663",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-584",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-1281",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-430",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-1190",
      "target": "CWE-696"
    },
    {
      "width": 1,
      "source": "CWE-368",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-482",
      "target": "CWE-480"
    },
    {
      "width": 1,
      "source": "CWE-835",
      "target": "CWE-834"
    },
    {
      "width": 1,
      "source": "CWE-248",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-479",
      "target": "CWE-828"
    },
    {
      "width": 1,
      "source": "CWE-479",
      "target": "CWE-663"
    },
    {
      "width": 1,
      "source": "CWE-670",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-480",
      "target": "CWE-670"
    },
    {
      "width": 1,
      "source": "CWE-609",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-421",
      "target": "CWE-362"
    },
    {
      "width": 1,
      "source": "CWE-413",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-591",
      "target": "CWE-413"
    },
    {
      "width": 1,
      "source": "CWE-1232",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-431",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-799",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-181",
      "target": "CWE-179"
    },
    {
      "width": 1,
      "source": "CWE-572",
      "target": "CWE-821"
    },
    {
      "width": 1,
      "source": "CWE-1264",
      "target": "CWE-821"
    },
    {
      "width": 1,
      "source": "CWE-1233",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-768",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-698",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-698",
      "target": "CWE-670"
    },
    {
      "width": 1,
      "source": "CWE-483",
      "target": "CWE-670"
    },
    {
      "width": 1,
      "source": "CWE-396",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-1265",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-820",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-696",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-1088",
      "target": "CWE-821"
    },
    {
      "width": 1,
      "source": "CWE-821",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-455",
      "target": "CWE-705"
    },
    {
      "width": 1,
      "source": "CWE-705",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-1234",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-180",
      "target": "CWE-179"
    },
    {
      "width": 1,
      "source": "CWE-764",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-764",
      "target": "CWE-662"
    },
    {
      "width": 1,
      "source": "CWE-1280",
      "target": "CWE-696"
    },
    {
      "width": 1,
      "source": "CWE-362",
      "target": "CWE-691"
    },
    {
      "width": 1,
      "source": "CWE-832",
      "target": "CWE-667"
    },
    {
      "width": 1,
      "source": "CWE-837",
      "target": "CWE-799"
    },
    {
      "width": 1,
      "source": "CWE-179",
      "target": "CWE-696"
    },
    {
      "width": 1,
      "source": "CWE-307",
      "target": "CWE-799"
    },
    {
      "width": 1,
      "source": "CWE-674",
      "target": "CWE-834"
    }
  ]
}